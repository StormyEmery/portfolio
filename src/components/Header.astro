---
const navLinks = [
  { name: "About Me", href: "/" },
  { name: "Projects", href: "#projects" },
  { name: "Contact", href: "#contact" },
  { name: "Resume", href: "/files/resume.pdf", download: "Stormy_Emery_Resume.pdf" },
];
---

<header class="fixed top-0 left-0 right-0 z-20 bg-gray-900 shadow-lg">
  <div class="container mx-auto px-4 py-4 flex justify-between items-center">
    <!-- Name/Logo -->
    <h1 class="text-2xl font-bold text-white">Stormy Emery</h1>
    <!-- Navigation -->
    <nav class="hidden md:flex space-x-6">
      {navLinks.map((link) => (
        <a
          href={link.href}
          download={link.download ? link.download : undefined}
          class={`text-lg text-gray-300 hover:text-blue-400 transition-colors duration-200 flex items-center ${link.href.startsWith("#") || link.href === "/" ? "active-link" : "bg-blue-600/20 hover:bg-blue-600/30 px-2 py-1 rounded"}`}
          data-href={link.href}
          aria-label={link.name === "Resume" ? "Download Stormy Emery's Resume" : `Navigate to ${link.name}`}
        >
          {link.name === "Resume" && <i class="fas fa-download fa-sm mr-1"></i>}
          {link.name}
        </a>
      ))}
    </nav>
    <!-- Hamburger Button for Mobile -->
    <button
      id="toggle-nav"
      class="md:hidden text-white focus:outline-none"
      aria-label="Toggle navigation menu"
    >
      <svg
        class="w-6 h-6"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M4 6h16M4 12h16m-7 6h7"
        ></path>
      </svg>
    </button>
  </div>
  <!-- Mobile Navigation Menu -->
  <nav id="mobile-nav" class="md:hidden bg-gray-800 flex flex-col items-center py-4 hidden">
    {navLinks.map((link) => (
      <a
        href={link.href}
        download={link.download ? link.download : undefined}
        class={`text-lg text-gray-300 hover:text-blue-400 py-2 transition-colors duration-200 flex items-center ${link.href.startsWith("#") || link.href === "/" ? "active-link" : "bg-blue-600/20 hover:bg-blue-600/30 px-2 rounded"}`}
        data-href={link.href}
        aria-label={link.name === "Resume" ? "Download Stormy Emery's Resume" : `Navigate to ${link.name}`}
      >
        {link.name === "Resume" && <i class="fas fa-download fa-sm mr-1"></i>}
        {link.name}
      </a>
    ))}
  </nav>
</header>

<script>
  // Ensure script runs only in browser
  if (typeof window !== "undefined") {
    const toggleButton = document.getElementById("toggle-nav");
    const mobileNav = document.getElementById("mobile-nav");

    // Toggle mobile navigation
    if (toggleButton && mobileNav) {
      toggleButton.addEventListener("click", () => {
        mobileNav.classList.toggle("hidden");
      });
    }

    // Handle active link and smooth scrolling
    function setActiveLink(activeHref: string) {
      const links = document.querySelectorAll(".active-link");
      const currentHash = window.location.hash || "";
      const isHome = !currentHash && (window.location.pathname === "/" || window.location.pathname === "");

      // Clear all active styles
      links.forEach((link) => {
        link.classList.remove("text-blue-400");
        link.classList.add("hover:text-blue-400");
      });

      // Set active link
      links.forEach((link) => {
        const href = link.getAttribute("data-href") || "";
        const isActive = (href === "/" && isHome && activeHref === "/") || (href === activeHref && href.startsWith("#"));
        link.classList.toggle("text-blue-400", isActive);
        link.classList.toggle("hover:text-blue-400", !isActive);
      });
    }

    // Initialize and update active link on click with smooth scrolling
    const links = document.querySelectorAll(".active-link");
    links.forEach((link) => {
      link.addEventListener("click", (e) => {
        const href = link.getAttribute("data-href") || "";
        
        // Skip smooth scrolling for download links
        if (href === "/files/resume.pdf") {
          // Hide mobile nav after clicking the resume link
          if (mobileNav && !mobileNav.classList.contains("hidden")) {
            mobileNav.classList.add("hidden");
          }
          return; // Allow the default download behavior
        }

        e.preventDefault();
        // Update active state immediately
        links.forEach((l) => {
          l.classList.remove("text-blue-400");
          l.classList.add("hover:text-blue-400");
        });
        if (href === "/" || href.startsWith("#")) {
          link.classList.add("text-blue-400");
          link.classList.remove("hover:text-blue-400");
        }

        // Smooth scroll to section
        if (href === "/") {
          window.scrollTo({ top: 0, behavior: "smooth" });
          window.history.replaceState(null, "", "/");
        } else if (href.startsWith("#")) {
          const targetId = href.substring(1);
          const targetElement = document.getElementById(targetId);
          if (targetElement) {
            const sectionTop = targetElement.getBoundingClientRect().top + window.scrollY;
            window.scrollTo({
              top: sectionTop,
              behavior: "smooth"
            });
            window.history.replaceState(null, "", href);
          }
        }

        // Hide mobile nav after clicking a link
        if (mobileNav && !mobileNav.classList.contains("hidden")) {
          mobileNav.classList.add("hidden");
        }

        // Update active link
        setActiveLink(href);
      });
    });

    // Run on load and hash change
    window.addEventListener("hashchange", () => {
      const currentHash = window.location.hash || "/";
      setActiveLink(currentHash);
    });
    window.addEventListener("load", () => {
      setTimeout(() => {
        const initialHref = window.location.hash || "/";
        setActiveLink(initialHref);
      }, 0);
    });

    // Initial call
    setActiveLink(window.location.hash || "/");
  }
</script>