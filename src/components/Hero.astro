---
const { name, tagline, bio } = Astro.props;
const skills = [
  "Unity", "C#", "MongoDB", "SQL", "Python", "Git", "Mobile Games", 
  "iOS", "Android", "APIs", "Jira", "Jenkins", "Sentry", "Debugging", 
  "Optimization", "Software Architecture and Design", "Full Stack Game Development"
];
// Duplicate skills for seamless looping
const carouselSkills = [...skills, ...skills];
---

<section class="min-h-screen flex items-center relative overflow-hidden bg-gray-900">
  <!-- Static Gradient Background -->
  <div class="absolute inset-0 bg-gradient-to-b from-gray-800 to-gray-900"></div>

  <div class="container mx-auto text-center px-4 relative z-10">
    <img
      src="/images/headshot.jpg"
      alt={name}
      class="w-48 h-48 rounded-full object-cover border-4 border-blue-400 hover:scale-105 transition-transform duration-300 shadow-xl mx-auto mb-8"
    />
    <h1 class="text-6xl font-bold mb-6 text-white drop-shadow-lg tracking-tight">{name}</h1>
    <p class="text-2xl mb-8 text-white font-medium">{tagline}</p>
    <p class="text-lg max-w-prose mx-auto mb-12 text-gray-300 leading-relaxed">{bio}</p>
    <div class="relative max-w-3xl mx-auto mb-12">
      <div class="overflow-hidden">
        <div class="flex animate-ticker">
          <div class="flex shrink-0">
            {carouselSkills.map((skill, index) => (
              <span
                class="bg-gray-700 text-blue-400 w-fit px-4 py-2 rounded-full text-sm flex items-center justify-center mx-2 whitespace-nowrap"
              >
                {skill}
              </span>
            ))}
          </div>
        </div>
      </div>
    </div>
    <a
      href="#contact"
      class="inline-block bg-blue-600 text-white py-3 px-8 rounded-lg hover:bg-blue-700 hover:scale-105 transition-transform duration-300 animate-pulse relative overflow-hidden group mb-32"
    >
      <span class="relative z-10 flex items-center gap-2">
        Get in Touch
        <svg class="w-5 h-5 transform group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </span>
    </a>
    <!-- Scroll-Down Indicator -->
    <a id="scroll-to-projects" href="#projects" class="absolute bottom-12 left-1/2 transform -translate-x-1/2 text-white animate-bounce z-20" aria-label="Scroll to projects">
      <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
      </svg>
    </a>
  </div>
</section>

<style>
  /* Skills Ticker */
  @keyframes ticker {
    0% { transform: translateX(0); }
    100% { transform: translateX(-50%); }
  }
  .animate-ticker {
    animation: ticker 35s linear infinite;
    display: inline-flex;
    width: max-content;
  }
  .animate-ticker:hover {
    animation-play-state: paused;
  }

  /* Button Pulse */
  @keyframes pulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.02); }
  }
  .animate-pulse {
    animation: pulse 2s ease-in-out infinite;
  }

  /* Scroll Indicator Bounce */
  @keyframes bounce {
    0%, 100% { transform: translate(-50%, 0); }
    50% { transform: translate(-50%, 10px); }
  }
  .animate-bounce {
    animation: bounce 2s infinite;
  }
</style>

<script>
  // Ensure script runs only in browser
  if (typeof window !== "undefined") {
    const scrollButton = document.getElementById("scroll-to-projects");
    if (scrollButton) {
      scrollButton.addEventListener("click", (e) => {
        e.preventDefault();
        console.log("Scroll button clicked");
        const projectsSection = document.getElementById("projects");
        if (projectsSection) {
          console.log("Projects section found");
          const sectionTop = projectsSection.getBoundingClientRect().top + window.scrollY;
          console.log("Attempting scroll to:", sectionTop);
          // Delay scroll to ensure DOM readiness
          setTimeout(() => {
            window.scrollTo({
              top: sectionTop,
              behavior: "smooth"
            });
            // Update the URL hash and manually dispatch hashchange
            window.history.replaceState(null, "", "#projects");
            const event = new Event("hashchange");
            window.dispatchEvent(event);
            console.log("Hash updated to:", window.location.hash);
            console.log("Hashchange event dispatched");
            console.log("Viewport height:", window.innerHeight);
            console.log("Projects top:", sectionTop);
            // Delay log to capture final scroll position
            setTimeout(() => {
              console.log("Scrolled to:", window.scrollY);
            }, 1000);
          }, 100);
        } else {
          console.log("Projects section not found");
        }
      });
    }
  }
</script>